name: 'bouncing_ball'
#count_agent: 2
lua: 'lua/simulation.lua'
time_precision: unit
#simulation_main_node: 'main'
#real_time: true
init_ports:
  - name: init
    type: double
    value: 2.1
atomic_nodes:
  - name: 'counter'
    time_precision: unit
    lua: 'lua/counter.lua'
    ports:
      - port_type: flow
        direction: input
        data_type: int
        name: 'starter'
      - port_type: message
        direction: output
        data_type: int
        name: 'counter'
composite_nodes:
  - name: 'main'
    time_precision: unit
    nodes:
      - adder
      - counter
    ports:
      - port_type: flow
        direction: input
        data_type: int
        name: 'init'
      - port_type: message
        direction: output
        data_type: int
        name: 'adder'
      - port_type: message
        direction: output
        data_type: int
        name: 'counter'
    connections:
      - main.init > counter.starter
      - main.init > adder.starter
      - counter.counter > adder.adder
      - adder.result > main.adder
      - counter.counter > main.counter
own_nodes: # Every self written node lives here
  - name: 'adder'
    class: adder_node # Same name as in the REGISTER("adder_node", generic_own_node, const std::string&, const node_context&, node_config);
    time_precision: unit
    ports:
      - port_type: flow
        direction: input
        data_type: int
        name: "starter"
      - port_type: message
        direction: input
        data_type: int
        name: "adder"
      - port_type: message
        direction: output
        data_type: int
        name: "result"